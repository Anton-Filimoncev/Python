from pyfmpcloud import settings
from pyfmpcloud import company_valuation as cv
from pyfmpcloud import stock_time_series as sts
import pandas as pd
import numpy as np
import numpy_financial as npf
from pandas_datareader import data as wb
import datetime
import requests
from scipy.stats.mstats import gmean
import statsmodels.api as sm


start_time = datetime.datetime.now() # Замер времени выполнения скрипта для одного тикера

COMPANY = 'INGR'
KEY = '19904f3a72ebd1574dc0e99f4b8333a6'

IS = requests.get(f'https://financialmodelingprep.com/api/v3/income-statement/{COMPANY}?apikey={KEY}').json()
BL = requests.get(f'https://financialmodelingprep.com/api/v3/balance-sheet-statement/{COMPANY}?apikey={KEY}').json()
RT = requests.get(f'https://financialmodelingprep.com/api/v3/ratios/{COMPANY}?apikey={KEY}').json()
CF = requests.get(f'https://financialmodelingprep.com/api/v3/cash-flow-statement/{COMPANY}?apikey={KEY}').json()
EV = requests.get(f'https://financialmodelingprep.com/api/v3/enterprise-values/{COMPANY}?apikey={KEY}').json()
PF = requests.get(f'https://financialmodelingprep.com/api/v3/profile/{COMPANY}?apikey={KEY}').json()
CQ = requests.get(f'https://financialmodelingprep.com/api/v3/quote/{COMPANY}?apikey={KEY}').json()

income_statement = pd.DataFrame(IS)
balance = pd.DataFrame(BL)
ratios = pd.DataFrame(RT)
cash_flow = pd.DataFrame(CF)
enterprise_value = pd.DataFrame(EV)
company_profile = pd.DataFrame(PF)
real_time_quote = pd.DataFrame(CQ)


work_table = pd.concat((income_statement[['date', 'revenue', 'operatingIncome', 'netIncome', 'eps', 'ebitda', 'depreciationAndAmortization', 'interestExpense']].replace(np.nan, 0)[0:10], balance[['totalAssets', 'totalLiabilities', 'totalStockholdersEquity', 'totalDebt']].replace(np.nan, 0)[0:10]
                    ,ratios[['dividendPayoutRatio', 'dividendYield', 'effectiveTaxRate']].replace(np.nan, 0)[0:10],cash_flow[['freeCashFlow', 'dividendsPaid']].replace(np.nan, 0)[0:10], enterprise_value[['numberOfShares', 'stockPrice']].replace(np.nan, 0)[0:10] ),
                       axis = 1)

LTGrowth = 0.02
PRICE = real_time_quote['price'][0]

company_profile_beta = company_profile['beta']

Total_rating = []

print(work_table)


print('Расчет показателей качества')

#--------------------------------------------------------------------------------------------------------------


# 'year_index' as the order of the year
work_table['year_index'] = range(1, len(work_table) + 1)[::-1]
# add intercept
work_table['intercept'] = 1

print(work_table)


# modeling
freeCashFlow_model = sm.OLS(work_table['freeCashFlow'], work_table[['year_index','intercept']]).fit()


freeCashFlow_pred_lr = freeCashFlow_model.predict([19,1])[0] #Прогнозируем через 10 лет


freeCashFlow_pred_lr5 = freeCashFlow_model.predict([14,1])[0] #Прогнозируем через 5 лет
freeCashFlow_pred_lr4 = freeCashFlow_model.predict([13,1])[0]
freeCashFlow_pred_lr3 = freeCashFlow_model.predict([12,1])[0]
freeCashFlow_pred_lr2 = freeCashFlow_model.predict([11,1])[0]
freeCashFlow_pred_lr1 = freeCashFlow_model.predict([10,1])[0]


# CAGR FCF

CF_forecast = {}

CF_forecast['next_year1'] = {}
CF_forecast['next_year1']['freeCashFlow'] = freeCashFlow_pred_lr1

CF_forecast['next_year2'] = {}
CF_forecast['next_year2']['freeCashFlow'] = freeCashFlow_pred_lr2

CF_forecast['next_year3'] = {}
CF_forecast['next_year3']['freeCashFlow'] = freeCashFlow_pred_lr3

CF_forecast['next_year4'] = {}
CF_forecast['next_year4']['freeCashFlow'] = freeCashFlow_pred_lr4

CF_forecast['next_year5'] = {}
CF_forecast['next_year5']['freeCashFlow'] = freeCashFlow_pred_lr5

print(CF_forecast)

print(f'freeCashFlow_pred_lr1 = {freeCashFlow_pred_lr1}')
print(f'freeCashFlow_pred_lr2 = {freeCashFlow_pred_lr2}')
print(f'freeCashFlow_pred_lr3 = {freeCashFlow_pred_lr3}')
print(f'freeCashFlow_pred_lr4 = {freeCashFlow_pred_lr4}')
print(f'freeCashFlow_pred_lr5 = {freeCashFlow_pred_lr5}')



print(freeCashFlow_pred_lr)


# ________________________________________  Расчет WACC  _______________________________________________


#Interest coverage ratio = EBIT / interest expenses

def interest_coveraga_and_RF(company):
  EBIT = work_table['ebitda'][0] - work_table['depreciationAndAmortization'][0]
  interest_expense = work_table['interestExpense'][0]
  interest_coverage_ratio = EBIT / interest_expense

    #RF
  start = datetime.datetime(1999, 12, 31)

  end= datetime.datetime.today().strftime('%Y-%m-%d')
  #end = datetime.datetime(2020, 7, 10)

  Treasury = wb.DataReader(['TB1YR'], 'fred', start, end)
  RF = float(Treasury.iloc[-1])
  RF = RF/100
  print(f'RF,interest_coverage_ratio = {RF,interest_coverage_ratio}')
  return [RF,interest_coverage_ratio]


#Cost of debt
def cost_of_debt(company, RF,interest_coverage_ratio):
  if interest_coverage_ratio > 8.5:
    #Rating is AAA
    credit_spread = 0.0063
  if (interest_coverage_ratio > 6.5) & (interest_coverage_ratio <= 8.5):
    #Rating is AA
    credit_spread = 0.0078
  if (interest_coverage_ratio > 5.5) & (interest_coverage_ratio <=  6.5):
    #Rating is A+
    credit_spread = 0.0098
  if (interest_coverage_ratio > 4.25) & (interest_coverage_ratio <=  5.49):
    #Rating is A
    credit_spread = 0.0108
  if (interest_coverage_ratio > 3) & (interest_coverage_ratio <=  4.25):
    #Rating is A-
    credit_spread = 0.0122
  if (interest_coverage_ratio > 2.5) & (interest_coverage_ratio <=  3):
    #Rating is BBB
    credit_spread = 0.0156
  if (interest_coverage_ratio > 2.25) & (interest_coverage_ratio <=  2.5):
    #Rating is BB+
    credit_spread = 0.02
  if (interest_coverage_ratio > 2) & (interest_coverage_ratio <=  2.25):
    #Rating is BB
    credit_spread = 0.0240
  if (interest_coverage_ratio > 1.75) & (interest_coverage_ratio <=  2):
    #Rating is B+
    credit_spread = 0.0351
  if (interest_coverage_ratio > 1.5) & (interest_coverage_ratio <=  1.75):
    #Rating is B
    credit_spread = 0.0421
  if (interest_coverage_ratio > 1.25) & (interest_coverage_ratio <=  1.5):
    #Rating is B-
    credit_spread = 0.0515
  if (interest_coverage_ratio > 0.8) & (interest_coverage_ratio <=  1.25):
    #Rating is CCC
    credit_spread = 0.0820
  if (interest_coverage_ratio > 0.65) & (interest_coverage_ratio <=  0.8):
    #Rating is CC
    credit_spread = 0.0864
  if (interest_coverage_ratio > 0.2) & (interest_coverage_ratio <=  0.65):
    #Rating is C
    credit_spread = 0.1134
  if interest_coverage_ratio <=  0.2:
    #Rating is D
    credit_spread = 0.1512

  cost_of_debt = RF + credit_spread
  print(f'cost_of_debt = {cost_of_debt}')
  return cost_of_debt


def costofequity(company):

  #RF
  start = datetime.datetime(1999, 12, 31)
  end= datetime.datetime.today().strftime('%Y-%m-%d')
  #end = datetime.datetime(2020, 7, 10)

  Treasury = wb.DataReader(['TB1YR'], 'fred', start, end)
  Treasury.dropna(inplace = True)
  RF = float(Treasury.iloc[-1])
  RF = RF/100


    #Beta
  beta = float(company_profile_beta)


  #Market Return
  start = datetime.datetime(1999, 12, 31)
  end= datetime.datetime.today().strftime('%Y-%m-%d')

  SP500 = wb.DataReader(['sp500'], 'fred', start, end)

#Drop all Not a number values using drop method.
  SP500.dropna(inplace = True)

  SP500yearlyreturn = (SP500['sp500'].iloc[-1]/ SP500['sp500'].iloc[-252])-1

  cost_of_equity = RF+(beta*(SP500yearlyreturn - RF))
  print(f'cost_of_equity = {cost_of_equity}')
  return cost_of_equity

#effective tax rate and capital structure
def wacc(company):

  ETR = work_table['effectiveTaxRate'][0]


  Debt_to = work_table['totalDebt'][0] / (work_table['totalDebt'][0] + work_table['totalStockholdersEquity'][0])
  equity_to = work_table['totalStockholdersEquity'][0] / (work_table['totalDebt'][0] + work_table['totalStockholdersEquity'][0])

  WACC = (kd*(1-ETR)*Debt_to) + (ke*equity_to)
  print(WACC,equity_to,Debt_to)
  print(f'WACC = {WACC}')
  return WACC


RF_and_IntCov = interest_coveraga_and_RF(COMPANY)
RF = RF_and_IntCov[0]
interest_coverage_ratio = RF_and_IntCov[1]
ke = costofequity(COMPANY)
kd = cost_of_debt(COMPANY, RF, interest_coverage_ratio)
wacc_company = wacc(COMPANY)
print('wacc of = ' + COMPANY + ' is \n' + str((wacc_company * 100)) + '%')


#FCF List of CFs for each year

CF_forec = pd.DataFrame.from_dict(CF_forecast,orient='columns')

FCF_List = CF_forec.iloc[0:].values.tolist()

# print(f'FCF_List = {FCF_List[0]}')


npv = npf.npv(wacc_company, FCF_List[0])
print(f'npv = {npv}')


Terminal_value = (freeCashFlow_pred_lr5 * (1 + LTGrowth)) /(wacc_company  - LTGrowth)

Terminal_value_Discounted = Terminal_value/( 1 + wacc_company) ** 4

print(f'Terminal_value_Discounted = {Terminal_value_Discounted}')

sum_num = npv + Terminal_value_Discounted
print(f'sum_num = {sum_num}')

spl_num = sum_num / work_table['numberOfShares'][0]
print(f'Estimated price = {spl_num}')

difference_model_and_market_value =  spl_num - PRICE
print(f'stock price = {PRICE}')

print(f'difference_model_and_market_value = {difference_model_and_market_value}')




import apiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials
import httplib2
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, time, date
import datetime as dt
from time import sleep
from pandas_datareader import data

# ___________________________________________________
from main_table import main_table
from sector_margin import sector_margin
from quality import quality
from wacc_gordon import gordon_wacc
from price_divs_book_value import price_divs_book_value
from fcf_r_squared import fcf_r_squared
from div_stability import div_stability



# Файл, полученный в Google Developer Console
CREDENTIALS_FILE = 'Seetzzz-1cb93f64d8d7.json'
# ID Google Sheets документа (можно взять из его URL)
spreadsheet_id = '1bfNJIgSEo9V5Jww1-EoUh_onba2bGY2LpDVx4aYlPzc'
spreadsheet_id2 = '1A3leW6ZfsoVEPXZsv0Loj4eAbyKRchnHrJLdP4RIXDA'

# Авторизуемся и получаем service — экземпляр доступа к API
credentials = ServiceAccountCredentials.from_json_keyfile_name(
	CREDENTIALS_FILE,
	['https://www.googleapis.com/auth/spreadsheets',
	 'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http=httpAuth)

# Чтения файла лист Russell_3000
values_Russell_3000 = service.spreadsheets().values().get(
    spreadsheetId=spreadsheet_id,
    range='Russell_3000!A1:L10000',  # Парсим только компании S&P_500!!!!
    majorDimension='COLUMNS'
).execute()

ticker_s = values_Russell_3000['values'][0][1:]

print(ticker_s)

scheduled_time = time(hour=22, minute=00, second=0)  # время отправки сообщения и запуска скрипта

KEY = '2105b9f242d47b69fc73f0f2205be048'

# _______________Считаем среднюю маржу по сектору ______________

sector_margin_company = sector_margin(100)

# =========================  ОСНОВНОЙ ЦИКЛ ==============================
while True:

    i = 2

    data_masssage = str()
    data_company = []
    data_delta_day = []

    for company in ticker_s:
        try:
            # sleep(2)
            stocks = data.DataReader(name=company, data_source="yahoo",
                                     start=dt.datetime.now() - timedelta(days=365), end=dt.datetime.now())

            curent_price = stocks['Close'][-1]
            yesterday_price = stocks['Close'][-2]
            last_year_price = stocks['Close'][0]

            delta_day = ((curent_price - yesterday_price) / yesterday_price) * 100
            delta_year = ((curent_price - last_year_price) / last_year_price) * 100

            print(f'''{company} delta_day = {delta_day}''')

            if delta_day < -5:
                data_company.append(company)
                data_delta_day.append(delta_day)



        except:
            continue


    # __________чистим таблицу________________
    print('чистим таблицу')
    for rows in range(2, 200):
        sleep(1)
        values = service.spreadsheets().values().batchUpdate(
            spreadsheetId=spreadsheet_id,
            body={
                "valueInputOption": "USER_ENTERED",
                "data": [
                    {"range": f"ALARM_price!A{rows}:K{rows}",
                     "majorDimension": "ROWS",
                     "values": [
                         [f"", f"", f"", f"", f"", f"", f"", f"", f"", f""],
                     ]},
                ]
            }
        ).execute()



    print(data_company)

    for COMPANY, delay in zip(data_company, data_delta_day):


        # _______________Создаем основную таблицу______________
        try:
            work_table = main_table(COMPANY)

        # _________________Выводим константы__________________

            PRICE = round(work_table['price'][0], 2)
            company_profile_beta = work_table['beta'][0]
            sector_company = work_table['sector'][0]
            year_len = work_table['year_len'][0] - 1
            LTGrowth = 0.02
            LTdis = 0.08

        except:
            work_table = 'NaN'
            PRICE = 'NaN'

        try:
            Gordon, WACC, spl_num, PRICE_model = gordon_wacc(work_table, LTGrowth, LTdis, PRICE)

        except:
            Gordon, WACC, spl_num, PRICE_model = 'NaN', 'NaN', 'NaN', 'NaN'

        # _________________________РАСЧЕТ ПОКАЗАТЕЛЕЙ КАЧЕСТВА_______________________
        try:
            quality_rating = quality(work_table, year_len, sector_margin_company, sector_company)
        except:
            quality_rating = 'NaN'
        # ++++++++++++++++++++++++++++++++++  ОЦЕНИВАЕМ ИСТИННУЮ СТОИМОСТЬ  +++++++++++++++++++++++++++++++++++++++

        # ______________Стоимость акции по дивам и балансовой стоимости(наивный метод)__________
        try:
            price_divs_book_value_naive = price_divs_book_value(work_table)
        except:
            price_divs_book_value_naive = 'NaN'
        # ~~~~~~~~~~~~~~~~~~~~  Оценка дисперсии модели линейной регресси FCF через R-Squared ~~~~~~~~

        # fcf_r_squared_value = fcf_r_squared(work_table, year_len)


        # ______________ Расчет стабильности выплат дивидендов ____________
        try:
            DSI, F_score, Aggregate_score = div_stability(work_table)
        except:
            DSI, F_score, Aggregate_score = 'NaN', 'NaN', 'NaN'

        print(DSI)
        print(F_score)
        print(Aggregate_score)

        # ~~~~~~~~~~~~~~~~~ ЗАПИСЬ В ТАБЛИЦУ ~~~~~~~~~~~~~~~~~


        values = service.spreadsheets().values().batchUpdate(
            spreadsheetId=spreadsheet_id,
            body={
                "valueInputOption": "USER_ENTERED",
                "data": [
                    {"range": f"ALARM_price!A{i}:K{i}",
                     "majorDimension": "ROWS",
                     "values": [
                         [f"{COMPANY}", f"{int(delay)}%", f"{WACC}", f"{spl_num}",
                          f"{PRICE}", f"{price_divs_book_value_naive}", f"{quality_rating}",
                          f"{DSI}", f"{F_score}", f"{Aggregate_score}"
                          ],
                     ]},
                ]
            }
        ).execute()

        i += 1

    # Время следующего старта будет назначено на запланированное время следующих суток
    next_loop_start = datetime.combine(date.today() + timedelta(days=1), scheduled_time)
    delay = (next_loop_start - datetime.now()).seconds
    sleep(delay)
